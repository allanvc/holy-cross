sd <- 1
# Criar uma sequência de valores para o eixo x (de 0 em diante, pois é truncada)
betas <- seq(0, 6, length = 100)
q <- quantile(betas, c(0.05, 0.65))
# Calcular as densidades das distribuições normais truncadas para cada valor de x
y1 <- dtruncnorm(x, a = 0, mean = mean1, sd = sd)
y2 <- dtruncnorm(x, a = 0, mean = mean2, sd = sd)
# Plotar a primeira curva de densidade normal truncada
plot(x, y1, type = "l", lwd = 2, col = "#4a90e2",
xlab = "Betas",
ylab = "Density",
main = "Full-conditional of " ~ beta[1],
bty = 'n',
ylim = c(0, max(y1, y2)))  # Definir o limite do eixo y para acomodar ambas as curvas
# Adicionar o preenchimento da primeira curva com hachuras e alpha suave (azul)
polygon(c(0, x), c(0, y1), col = rgb(0, 0, 1, alpha = 0.2), border = NA)
# Adicionar linhas verticais nas médias de ambas as distribuições
abline(v = mean1, col = "red", lty = 2)
abline(v = q, col=c("#228b22", "#228b22"), lty=2)
# Criar uma sequência de valores para o eixo x (de 0 em diante, pois é truncada)
betas <- seq(0, 6, length = 100)
q <- quantile(betas, c(0.05, 0.60))
# Calcular as densidades das distribuições normais truncadas para cada valor de x
y1 <- dtruncnorm(x, a = 0, mean = mean1, sd = sd)
y2 <- dtruncnorm(x, a = 0, mean = mean2, sd = sd)
# Plotar a primeira curva de densidade normal truncada
plot(x, y1, type = "l", lwd = 2, col = "#4a90e2",
xlab = "Betas",
ylab = "Density",
main = "Full-conditional of " ~ beta[1],
bty = 'n',
ylim = c(0, max(y1, y2)))  # Definir o limite do eixo y para acomodar ambas as curvas
# Adicionar o preenchimento da primeira curva com hachuras e alpha suave (azul)
polygon(c(0, x), c(0, y1), col = rgb(0, 0, 1, alpha = 0.2), border = NA)
# Adicionar linhas verticais nas médias de ambas as distribuições
abline(v = mean1, col = "red", lty = 2)
abline(v = q, col=c("#228b22", "#228b22"), lty=2)
# Instalar e carregar o pacote 'truncnorm' (se ainda não estiver instalado)
if (!require(truncnorm)) install.packages("truncnorm")
library(truncnorm)
# Definir os parâmetros das distribuições normais truncadas
mean1 <- 1.5
mean2 <- 2.5
sd <- 1
# Criar uma sequência de valores para o eixo x (de 0 em diante, pois é truncada)
betas <- seq(0, 6, length = 100)
q <- quantile(betas, c(0.05, 0.60))
# Calcular as densidades das distribuições normais truncadas para cada valor de x
y1 <- dtruncnorm(x, a = 0, mean = mean1, sd = sd)
y2 <- dtruncnorm(x, a = 0, mean = mean2, sd = sd)
# Plotar a primeira curva de densidade normal truncada
plot(x, y1, type = "l", lwd = 2, col = "#4a90e2",
xlab = "Betas",
ylab = "Density",
main = "Full-conditional of " ~ beta[1],
bty = 'n',
ylim = c(0, max(y1, y2)))  # Definir o limite do eixo y para acomodar ambas as curvas
# Adicionar o preenchimento da primeira curva com hachuras e alpha suave (azul)
polygon(c(0, x), c(0, y1), col = rgb(0, 0, 1, alpha = 0.2), border = NA)
abline(v = q, col=c("#228b22", "#228b22"), lty=2)
abline(v = q, col=c("#228b22", "#228b22"), lty=2)
abline(v = 2.5, col="#4a90e2")
abline(v = mean1, col="#4a90e2")
# Plotar a primeira curva de densidade normal truncada
plot(x, y1, type = "l", lwd = 2, col = "back",
xlab = "Betas",
ylab = "Density",
main = "Full-conditional of " ~ beta[1],
bty = 'n',
ylim = c(0, max(y1, y2)))  # Definir o limite do eixo y para acomodar ambas as curvas
# Adicionar o preenchimento da primeira curva com hachuras e alpha suave (azul)
polygon(c(0, x), c(0, y1), col = rgb(0, 0, 1, alpha = 0.2), border = NA)
abline(v = q, col=c("#228b22", "#228b22"), lty=2)
abline(v = mean1, col="#4a90e2")
# Plotar a primeira curva de densidade normal truncada
plot(x, y1, type = "l", lwd = 2, col = "black",
xlab = "Betas",
ylab = "Density",
main = "Full-conditional of " ~ beta[1],
bty = 'n',
ylim = c(0, max(y1, y2)))  # Definir o limite do eixo y para acomodar ambas as curvas
# Adicionar o preenchimento da primeira curva com hachuras e alpha suave (azul)
polygon(c(0, x), c(0, y1), col = rgb(0, 0, 1, alpha = 0.2), border = NA)
abline(v = q, col=c("#228b22", "#228b22"), lty=2)
abline(v = mean1, col="#4a90e2")
# Instalar e carregar o pacote 'truncnorm' (se ainda não estiver instalado)
# if (!require(truncnorm)) install.packages("truncnorm")
library(truncnorm)
# Definir os parâmetros das distribuições normais truncadas
mean1 <- 1.5
# mean2 <- 2.5
sd <- 1
# Definir os parâmetros das distribuições normais truncadas
mean1 <- 1.5
# mean2 <- 2.5
sd <- 1
# Criar uma sequência de valores para o eixo x (de 0 em diante, pois é truncada)
betas <- seq(0, 6, length = 100)
q <- quantile(betas, c(0.05, 0.60))
# Calcular as densidades das distribuições normais truncadas para cada valor de x
y1 <- dtruncnorm(x, a = 0, mean = mean1, sd = sd)
# Plotar a primeira curva de densidade normal truncada
plot(x, y1, type = "l", lwd = 2, col = "black",
xlab = "Betas",
ylab = "Density",
main = "Full-conditional of " ~ beta[1],
bty = 'n',
ylim = c(0, max(y1, y2)))  # Definir o limite do eixo y para acomodar ambas as curvas
# Plotar a primeira curva de densidade normal truncada
plot(x, y1, type = "l", lwd = 2, col = "gray",
xlab = "Betas",
ylab = "Density",
main = "Full-conditional of " ~ beta[1],
bty = 'n',
ylim = c(0, max(y1, y2)))  # Definir o limite do eixo y para acomodar ambas as curvas
# Adicionar o preenchimento da primeira curva com hachuras e alpha suave (azul)
polygon(c(0, x), c(0, y1), col = rgb(0, 0, 1, alpha = 0.2), border = NA)
# Plotar a primeira curva de densidade normal truncada
plot(x, y1, type = "l", lwd = 2, col = "gray",
xlab = "Betas",
ylab = "Density",
main = "Full-conditional of " ~ beta[1],
bty = 'n',
ylim = c(0, max(y1, y2)))  # Definir o limite do eixo y para acomodar ambas as curvas
# Plotar a primeira curva de densidade normal truncada
plot(x, y1, type = "l", lwd = 2, col = "gray",
xlab = "Betas",
ylab = "Density",
main = "Full-conditional of " ~ beta[1],
bty = 'n',
ylim = c(0, max(y1, y2)))  # Definir o limite do eixo y para acomodar ambas as curvas
# Adicionar o preenchimento da primeira curva com hachuras e alpha suave (azul)
polygon(c(0, x), c(0, y1), col = rgb(0, 0, 1, alpha = 0.2), border = NA)
abline(v = q, col=c("#228b22", "#228b22"), lty=2)
abline(v = mean1, col="#4a90e2")
# Instalar e carregar os pacotes necessários (se ainda não estiverem instalados)
if (!require(ggplot2)) install.packages("ggplot2")
if (!require(truncnorm)) install.packages("truncnorm")
library(ggplot2)
library(truncnorm)
# Definir os parâmetros das distribuições normais truncadas
mean1 <- 1.5
mean2 <- 2.5
sd <- 1
# Criar um dataframe para x
x <- seq(0, 6, length = 100)
df <- data.frame(x = x)
# Adicionar as densidades das duas distribuições truncadas ao dataframe
df$y1 <- dtruncnorm(x, a = 0, mean = mean1, sd = sd)
df$y2 <- dtruncnorm(x, a = 0, mean = mean2, sd = sd)
# Plotar usando ggplot2 com preenchimento da área
ggplot(df, aes(x = x)) +
# Preencher a área da primeira curva com azul suave
geom_area(aes(y = y1), fill = rgb(0, 0, 1, alpha = 0.2)) +
# Preencher a área da segunda curva com laranja suave
geom_area(aes(y = y2), fill = rgb(1, 0.5, 0, alpha = 0.2)) +
# Adicionar a primeira curva com linha azul
geom_line(aes(y = y1), color = "blue", size = 1) +
# Adicionar a segunda curva com linha laranja
geom_line(aes(y = y2), color = "orange", size = 1) +
# Adicionar linhas verticais nas médias das distribuições
geom_vline(xintercept = mean1, color = "red", linetype = "dashed") +
geom_vline(xintercept = mean2, color = "darkorange", linetype = "dashed") +
# Configurações do gráfico
labs(title = "Distribuições Normais Truncadas (x > 0)",
x = "Valores",
y = "Densidade") +
theme_minimal()
# Instalar e carregar o pacote 'truncnorm' (se ainda não estiver instalado)
if (!require(truncnorm)) install.packages("truncnorm")
library(truncnorm)
# Definir os parâmetros das distribuições normais truncadas
mean1 <- 1.5
mean2 <- 2.5
sd <- 1
# Criar uma sequência de valores para o eixo x (de 0 em diante, pois é truncada)
x <- seq(0, 6, length = 100)
y1 <- dtruncnorm(x, a = 0, mean = mean1, sd = sd)
y2 <- dtruncnorm(x, a = 0, mean = mean2, sd = sd)
# Plotar a primeira curva de densidade normal truncada
plot(x, y1, type = "l", lwd = 2, col = "blue",
main = "Distribuições Normais Truncadas (x > 0)",
xlab = "Valores",
ylab = "Densidade",
ylim = c(0, max(y1, y2)))  # Definir o limite do eixo y para acomodar ambas as curvas
# Preenchimento para a primeira curva (azul)
for(i in 1:length(x)) {
rect(x[i], 0, x[i + 1], y1[i], col = rgb(0, 0, 1, alpha = 0.2), border = NA)
}
# Plotar a segunda curva de densidade normal truncada
lines(x, y2, col = "orange", lwd = 2)
# Preenchimento para a segunda curva (laranja)
for(i in 1:length(x)) {
rect(x[i], 0, x[i + 1], y2[i], col = rgb(1, 0.5, 0, alpha = 0.2), border = NA)
}
# Adicionar linhas verticais nas médias das distribuições
abline(v = mean1, col = "red", lty = 2)
abline(v = mean2, col = "darkorange", lty = 2)
# Instalar e carregar os pacotes necessários (se ainda não estiverem instalados)
if (!require(ggplot2)) install.packages("ggplot2")
if (!require(truncnorm)) install.packages("truncnorm")
library(ggplot2)
library(truncnorm)
# Definir os parâmetros da distribuição normal truncada
mean1 <- 1.5
sd <- 1
# Criar uma sequência de valores para o eixo x (de 0 em diante, pois é truncada)
betas <- seq(0, 6, length = 100)
q <- quantile(betas, c(0.05, 0.60))
# Calcular as densidades das distribuições normais truncadas para cada valor de x
y1 <- dtruncnorm(betas, a = 0, mean = mean1, sd = sd)
df <- data.frame(betas, y1)
# Plotar usando ggplot2
ggplot(df, aes(x = betas, y = y1)) +
# Preencher a área sob a curva com uma cor azul suave
geom_area(fill = rgb(0, 0, 1, alpha = 0.2)) +
# Adicionar a curva de densidade com linha cinza
geom_line(color = "gray", size = 1) +
# Adicionar as linhas verticais para os quantis
geom_vline(xintercept = q, color = "#228b22", linetype = "dashed") +
# Adicionar a linha vertical para a média
geom_vline(xintercept = mean1, color = "#4a90e2") +
# Títulos e rótulos
labs(title = expression("Full-conditional of " ~ beta[1]),
x = "Betas",
y = "Density") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),  # Centralizar o título
panel.border = element_blank(),          # Remover a borda do gráfico
axis.line = element_line(color = "black"))  # Linha do eixo preto
# Instalar e carregar os pacotes necessários (se ainda não estiverem instalados)
if (!require(ggplot2)) install.packages("ggplot2")
if (!require(truncnorm)) install.packages("truncnorm")
library(ggplot2)
library(truncnorm)
# Definir os parâmetros da distribuição normal truncada
mean1 <- 1.5
sd <- 1
# Criar uma sequência de valores para o eixo x (de 0 em diante, pois é truncada)
betas <- seq(0, 6, length = 100)
q <- quantile(betas, c(0.05, 0.60))
# Calcular as densidades das distribuições normais truncadas para cada valor de x
y1 <- dtruncnorm(betas, a = 0, mean = mean1, sd = sd)
df <- data.frame(betas, y1)
# Plotar usando ggplot2
ggplot(df, aes(x = betas, y = y1)) +
# Preencher a área sob a curva com uma cor azul suave
geom_area(fill = rgb(0, 0, 1, alpha = 0.2)) +
# Adicionar a curva de densidade com linha cinza
geom_line(color = "gray", size = 1) +
# Adicionar as linhas verticais para os quantis
geom_vline(xintercept = q, color = "#228b22", linetype = "dashed") +
# Adicionar a linha vertical para a média
geom_vline(xintercept = mean1, color = "#4a90e2") +
# Títulos e rótulos
labs(title = expression("Full-conditional of " ~ beta[1]),
x = beta[1],
y = "Density") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),  # Centralizar o título
panel.border = element_blank(),          # Remover a borda do gráfico
axis.line = element_line(color = "black"))  # Linha do eixo preto
# Instalar e carregar os pacotes necessários (se ainda não estiverem instalados)
if (!require(ggplot2)) install.packages("ggplot2")
if (!require(truncnorm)) install.packages("truncnorm")
library(ggplot2)
library(truncnorm)
# Definir os parâmetros da distribuição normal truncada
mean1 <- 1.5
sd <- 1
# Criar uma sequência de valores para o eixo x (de 0 em diante, pois é truncada)
betas <- seq(0, 6, length = 100)
q <- quantile(betas, c(0.05, 0.60))
# Calcular as densidades das distribuições normais truncadas para cada valor de x
y1 <- dtruncnorm(betas, a = 0, mean = mean1, sd = sd)
df <- data.frame(betas, y1)
# Plotar usando ggplot2
ggplot(df, aes(x = betas, y = y1)) +
# Preencher a área sob a curva com uma cor azul suave
geom_area(fill = rgb(0, 0, 1, alpha = 0.2)) +
# Adicionar a curva de densidade com linha cinza
geom_line(color = "gray", size = 1) +
# Adicionar as linhas verticais para os quantis
geom_vline(xintercept = q, color = "#228b22", linetype = "dashed") +
# Adicionar a linha vertical para a média
geom_vline(xintercept = mean1, color = "#4a90e2") +
# Títulos e rótulos
labs(title = expression("Full-conditional of " ~ beta[1]),
x = ~beta[1],
y = "Density") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),  # Centralizar o título
panel.border = element_blank(),          # Remover a borda do gráfico
axis.line = element_line(color = "black"))  # Linha do eixo preto
# Instalar e carregar os pacotes necessários (se ainda não estiverem instalados)
if (!require(ggplot2)) install.packages("ggplot2")
if (!require(truncnorm)) install.packages("truncnorm")
library(ggplot2)
library(truncnorm)
# Definir os parâmetros da distribuição normal truncada
mean1 <- 1.5
sd <- 1
# Criar uma sequência de valores para o eixo x (de 0 em diante, pois é truncada)
betas <- seq(0, 6, length = 100)
q <- quantile(betas, c(0.05, 0.60))
# Calcular as densidades das distribuições normais truncadas para cada valor de x
y1 <- dtruncnorm(betas, a = 0, mean = mean1, sd = sd)
df <- data.frame(betas, y1)
# Plotar usando ggplot2
ggplot(df, aes(x = betas, y = y1)) +
# Preencher a área sob a curva com uma cor azul suave
geom_area(fill = rgb(0, 0, 1, alpha = 0.2)) +
# Adicionar a curva de densidade com linha cinza
geom_line(color = "gray", size = 1) +
# Adicionar as linhas verticais para os quantis
geom_vline(xintercept = q, color = "#228b22", linetype = "dashed") +
# Adicionar a linha vertical para a média
geom_vline(xintercept = mean1, color = "#4a90e2") +
# Títulos e rótulos
labs(title = expression("Full-conditional of " ~ beta[1]),
x = expression(beta[1]),
y = "Density") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),   # Centralizar o título
panel.border = element_blank(),           # Remover a borda do gráfico
axis.line = element_line(color = "black"), # Linha do eixo preto
panel.grid = element_blank()              # Remover as linhas de grade
)
# ------------
# Instalar e carregar os pacotes necessários (se ainda não estiverem instalados)
# if (!require(ggplot2)) install.packages("ggplot2")
# if (!require(truncnorm)) install.packages("truncnorm")
library(ggplot2)
library(truncnorm)
# Definir os parâmetros da distribuição normal truncada
mean1 <- 1.5
sd <- 1
# Criar uma sequência de valores para o eixo x (de 0 em diante, pois é truncada)
betas <- seq(0, 6, length = 100)
q <- quantile(betas[betas>0], c(0.05, 0.95))
# Calcular as densidades das distribuições normais truncadas para cada valor de x
y1 <- dtruncnorm(betas, a = 0, mean = mean1, sd = sd)
df <- data.frame(betas, y1)
# Plotar usando ggplot2
ggplot(df, aes(x = betas, y = y1)) +
# Preencher a área sob a curva com uma cor azul suave
geom_area(fill = rgb(0, 0, 1, alpha = 0.2)) +
# Adicionar a curva de densidade com linha cinza
geom_line(color = "gray", size = 1) +
# Adicionar as linhas verticais para os quantis
geom_vline(xintercept = q, color = "#228b22", linetype = "dashed") +
# Adicionar a linha vertical para a média
geom_vline(xintercept = mean1, color = "#4a90e2") +
# Títulos e rótulos
labs(title = expression("Full-conditional of " ~ beta[1]),
x = expression(beta[1]),
y = "Density") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),   # Centralizar o título
panel.border = element_blank(),           # Remover a borda do gráfico
axis.line = element_line(color = "black"), # Linha do eixo preto
panel.grid = element_blank()              # Remover as linhas de grade
)
betas
# Criar uma sequência de valores para o eixo x (de 0 em diante, pois é truncada)
betas <- seq(0, 5, length = 100)
# Criar uma sequência de valores para o eixo x (de 0 em diante, pois é truncada)
betas <- seq(-1, 5, length = 100)
q <- quantile(betas[betas>0], c(0.05, 0.95))
# Calcular as densidades das distribuições normais truncadas para cada valor de x
y1 <- dtruncnorm(betas, a = 0, mean = mean1, sd = sd)
df <- data.frame(betas, y1)
# Plotar usando ggplot2
ggplot(df, aes(x = betas, y = y1)) +
# Preencher a área sob a curva com uma cor azul suave
geom_area(fill = rgb(0, 0, 1, alpha = 0.2)) +
# Adicionar a curva de densidade com linha cinza
geom_line(color = "gray", size = 1) +
# Adicionar as linhas verticais para os quantis
geom_vline(xintercept = q, color = "#228b22", linetype = "dashed") +
# Adicionar a linha vertical para a média
geom_vline(xintercept = mean1, color = "#4a90e2") +
# Títulos e rótulos
labs(title = expression("Full-conditional of " ~ beta[1]),
x = expression(beta[1]),
y = "Density") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),   # Centralizar o título
panel.border = element_blank(),           # Remover a borda do gráfico
axis.line = element_line(color = "black"), # Linha do eixo preto
panel.grid = element_blank()              # Remover as linhas de grade
)
# ------------
# Instalar e carregar os pacotes necessários (se ainda não estiverem instalados)
# if (!require(ggplot2)) install.packages("ggplot2")
# if (!require(truncnorm)) install.packages("truncnorm")
library(ggplot2)
library(truncnorm)
# Definir os parâmetros da distribuição normal truncada
mean1 <- 1.5
sd <- 1
# Criar uma sequência de valores para o eixo x (de 0 em diante, pois é truncada)
betas <- seq(0, 6, length = 100)
q <- quantile(betas[betas>0], c(0.05, 0.60))
# Calcular as densidades das distribuições normais truncadas para cada valor de x
y1 <- dtruncnorm(betas, a = 0, mean = mean1, sd = sd)
df <- data.frame(betas, y1)
# Plotar usando ggplot2
ggplot(df, aes(x = betas, y = y1)) +
# Preencher a área sob a curva com uma cor azul suave
geom_area(fill = rgb(0, 0, 1, alpha = 0.2)) +
# Adicionar a curva de densidade com linha cinza
geom_line(color = "gray", size = 1) +
# Adicionar as linhas verticais para os quantis
geom_vline(xintercept = q, color = "#228b22", linetype = "dashed") +
# Adicionar a linha vertical para a média
geom_vline(xintercept = mean1, color = "#4a90e2") +
# Títulos e rótulos
labs(title = expression("Full-conditional of " ~ beta[1]),
x = expression(beta[1]),
y = "Density") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),   # Centralizar o título
panel.border = element_blank(),           # Remover a borda do gráfico
axis.line = element_line(color = "black"), # Linha do eixo preto
panel.grid = element_blank()              # Remover as linhas de grade
)
# Criar uma sequência de valores para o eixo x (de 0 em diante, pois é truncada)
betas <- seq(0, 6, length = 100)
q <- quantile(betas[betas>0], c(0.05, 0.55))
# Calcular as densidades das distribuições normais truncadas para cada valor de x
y1 <- dtruncnorm(betas, a = 0, mean = mean1, sd = sd)
df <- data.frame(betas, y1)
# Plotar usando ggplot2
ggplot(df, aes(x = betas, y = y1)) +
# Preencher a área sob a curva com uma cor azul suave
geom_area(fill = rgb(0, 0, 1, alpha = 0.2)) +
# Adicionar a curva de densidade com linha cinza
geom_line(color = "gray", size = 1) +
# Adicionar as linhas verticais para os quantis
geom_vline(xintercept = q, color = "#228b22", linetype = "dashed") +
# Adicionar a linha vertical para a média
geom_vline(xintercept = mean1, color = "#4a90e2") +
# Títulos e rótulos
labs(title = expression("Full-conditional of " ~ beta[1]),
x = expression(beta[1]),
y = "Density") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),   # Centralizar o título
panel.border = element_blank(),           # Remover a borda do gráfico
axis.line = element_line(color = "black"), # Linha do eixo preto
panel.grid = element_blank()              # Remover as linhas de grade
)
# Criar uma sequência de valores para o eixo x (de 0 em diante, pois é truncada)
betas <- seq(0, 6, length = 100)
q <- quantile(betas[betas>0], c(0.03, 0.60))
# Calcular as densidades das distribuições normais truncadas para cada valor de x
y1 <- dtruncnorm(betas, a = 0, mean = mean1, sd = sd)
df <- data.frame(betas, y1)
# Plotar usando ggplot2
ggplot(df, aes(x = betas, y = y1)) +
# Preencher a área sob a curva com uma cor azul suave
geom_area(fill = rgb(0, 0, 1, alpha = 0.2)) +
# Adicionar a curva de densidade com linha cinza
geom_line(color = "gray", size = 1) +
# Adicionar as linhas verticais para os quantis
geom_vline(xintercept = q, color = "#228b22", linetype = "dashed") +
# Adicionar a linha vertical para a média
geom_vline(xintercept = mean1, color = "#4a90e2") +
# Títulos e rótulos
labs(title = expression("Full-conditional of " ~ beta[1]),
x = expression(beta[1]),
y = "Density") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),   # Centralizar o título
panel.border = element_blank(),           # Remover a borda do gráfico
axis.line = element_line(color = "black"), # Linha do eixo preto
panel.grid = element_blank()              # Remover as linhas de grade
)
# Criar uma sequência de valores para o eixo x (de 0 em diante, pois é truncada)
betas <- seq(0, 6, length = 100)
q <- quantile(betas[betas>0], c(0.02, 0.60))
# Calcular as densidades das distribuições normais truncadas para cada valor de x
y1 <- dtruncnorm(betas, a = 0, mean = mean1, sd = sd)
df <- data.frame(betas, y1)
# Plotar usando ggplot2
ggplot(df, aes(x = betas, y = y1)) +
# Preencher a área sob a curva com uma cor azul suave
geom_area(fill = rgb(0, 0, 1, alpha = 0.2)) +
# Adicionar a curva de densidade com linha cinza
geom_line(color = "gray", size = 1) +
# Adicionar as linhas verticais para os quantis
geom_vline(xintercept = q, color = "#228b22", linetype = "dashed") +
# Adicionar a linha vertical para a média
geom_vline(xintercept = mean1, color = "#4a90e2") +
# Títulos e rótulos
labs(title = expression("Full-conditional of " ~ beta[1]),
x = expression(beta[1]),
y = "Density") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),   # Centralizar o título
panel.border = element_blank(),           # Remover a borda do gráfico
axis.line = element_line(color = "black"), # Linha do eixo preto
panel.grid = element_blank()              # Remover as linhas de grade
)
